{"version":3,"sources":["serviceWorker.ts","redux/counter-reducer.ts","components/InnerValue/InnerValue.tsx","components/Button/Button.tsx","components/Counter/Counter.tsx","components/InputComponent/InputComponent.tsx","components/Settings/Settings.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","ACTIONS_TYPE","InnerValue","props","isSettingBlockActive","className","isIncorrectValues","value","max","Button","onClick","callBack","disabled","isDisabled","name","Counter","start","increaseValue","isIncBtnDisable","resetValue","isResetBtnDisable","InputComponent","isIncorrectValue","type","inputValue","onChange","e","currentTarget","changeValue","changeStatusButtons","Settings","isIncorrectMaxValue","changeMaxValue","isIncorrectStartValue","changeMinValue","onClickSetBtn","isSetBtnDisable","initialState","setBtnStatus","incBtnStatus","resetBtnStatus","changeStart","CHANGE_START_VALUE","payload","changeMax","CHANGE_MAX_VALUE","CHANGE_VALUE","App","dispatch","useDispatch","counter","useSelector","state","counterReducer","getItemFromLocalStorage","fn","valueAsString","localStorage","getItem","newValue","JSON","parse","useEffect","setItem","stringify","disabledBlock","flag","status","CHANGE_STATUS_SET_BTN","CHANGE_STATUS_INC_BTN","changeStatusIncBtn","CHANGE_STATUS_RESET_BTN","changeStatusResetBtn","disableSet","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ebb8993a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum ACTIONS_TYPE {\n    CHANGE_START_VALUE = 'Counter/CHANGE-START-VALUE',\n    CHANGE_MAX_VALUE = 'Counter/CHANGE-MAX-VALUE',\n    CHANGE_VALUE = 'Counter/CHANGE-VALUE',\n    CHANGE_STATUS_SET_BTN = 'Counter/CHANGE-STATUS-SET-BTN',\n    CHANGE_STATUS_INC_BTN = 'Counter/CHANGE-STATUS-INC-BTN',\n    CHANGE_STATUS_RESET_BTN = 'Counter/CHANGE-STATUS-RESET-BTN',\n}\n\nconst initialState = {\n    start: 0,\n    max: 5,\n    value: 0,\n    setBtnStatus: true,\n    incBtnStatus: false,\n    resetBtnStatus: false,\n}\n\ntype ActionsType =\n    ActionStartType\n    | ActionMaxType\n    | ActionValueType\n    | ActionSetBtnStatusType\n    | ActionIncBtnStatusType\n    | ActionResetBtnStatusType;\n\ntype ActionStartType = {\n    type: ACTIONS_TYPE.CHANGE_START_VALUE\n    payload: {\n        start: number\n    }\n};\n\ntype ActionMaxType = {\n    type: ACTIONS_TYPE.CHANGE_MAX_VALUE\n    payload: {\n        max: number\n    }\n};\n\ntype ActionValueType = {\n    type: ACTIONS_TYPE.CHANGE_VALUE\n    payload: {\n        value: number\n    }\n};\n\ntype ActionSetBtnStatusType = {\n    type: ACTIONS_TYPE.CHANGE_STATUS_SET_BTN\n    payload: {\n        setBtnStatus: boolean\n    }\n\n};\n\ntype ActionIncBtnStatusType = {\n    type: ACTIONS_TYPE.CHANGE_STATUS_INC_BTN\n    payload: {\n        incBtnStatus: boolean\n    }\n\n};\n\ntype ActionResetBtnStatusType = {\n    type: ACTIONS_TYPE.CHANGE_STATUS_RESET_BTN\n    payload: {\n        resetBtnStatus: boolean\n    }\n\n};\n\nexport type initialStateType = typeof initialState;\n\nexport const counterReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.CHANGE_START_VALUE :\n        case ACTIONS_TYPE.CHANGE_MAX_VALUE :\n        case ACTIONS_TYPE.CHANGE_VALUE :\n        case ACTIONS_TYPE.CHANGE_STATUS_SET_BTN :\n        case ACTIONS_TYPE.CHANGE_STATUS_INC_BTN :\n        case ACTIONS_TYPE.CHANGE_STATUS_RESET_BTN :\n\n            return {\n                ...state, ...action.payload\n            }\n    }\n\n    return state;\n}\n\nexport const changeStart = (start: number) => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_START_VALUE,\n        payload: {\n            start,\n        },\n    }\n}\nexport const changeMax = (max: number) => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_MAX_VALUE,\n        payload: {\n            max,\n        },\n    }\n}\nexport const changeValue = (value: number) => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_VALUE,\n        payload: {\n            value,\n        },\n    }\n}\nexport const changeStatusSetBtn = (status: boolean) => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_STATUS_SET_BTN,\n        payload: {\n            setBtnStatus: status,\n        },\n    }\n}\nexport const changeStatusIncBtn = (status: boolean) => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_STATUS_INC_BTN,\n        payload: {\n            incBtnStatus: status,\n        },\n    }\n}\nexport const changeStatusResetBtn = (status: boolean) => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_STATUS_RESET_BTN,\n        payload: {\n            resetBtnStatus: status,\n        },\n    }\n}\n","import React from \"react\";\n\nexport type PropsType = {\n    value: number\n    max: number\n    start: number\n    isIncorrectValues: boolean\n    isSettingBlockActive: boolean\n}\n\nexport const InnerValue = (props: PropsType) => {\n    return (\n        props.isSettingBlockActive\n            ? <div\n                className={\n                    props.isIncorrectValues\n                        ? \"textValue value error\" : \"value textValue\"\n                }\n            >\n                {\n                    props.isIncorrectValues\n                        ? \"Incorrect value\" : \"Enter values and press 'set'\"\n                }\n            </div>\n\n            : <div\n                className={props.value === props.max ? \"value error\" : \"value\"}\n            >\n                {props.value}\n            </div>\n\n    )\n};","import React from \"react\";\n\ntype PropsType = {\n    name: string\n    isDisabled: boolean\n    callBack: () => void\n}\n\nexport const Button = (props: PropsType) => {\n    return (\n        <>\n            <button\n                className=\"Button\"\n                onClick={props.callBack}\n                disabled={props.isDisabled}\n            >\n                {props.name}\n            </button>\n        </>\n    );\n};","import {InnerValue} from \"../InnerValue/InnerValue\";\nimport {Button} from \"../Button/Button\";\nimport React from \"react\";\n\ntype PropsType = {\n    value: number\n    max: number\n    start: number\n\n    increaseValue: () => void\n    resetValue: () => void\n    isIncBtnDisable: boolean\n    isResetBtnDisable: boolean\n    isIncorrectValues: boolean\n    isSettingBlockActive: boolean\n}\n\nexport const Counter = (props: PropsType) => {\n\n    return (\n        <div className=\"Block Counter\">\n            <div className=\"Display\">\n                <InnerValue\n                    value={props.value}\n                    max={props.max} start={props.start}\n                    isIncorrectValues={props.isIncorrectValues}\n                    isSettingBlockActive={props.isSettingBlockActive}\n                />\n            </div>\n            <div className=\"BlockWrapper\">\n                <Button callBack={props.increaseValue} isDisabled={props.isIncBtnDisable}\n                        name=\"inc\"/>\n                <Button callBack={props.resetValue} isDisabled={props.isResetBtnDisable}\n                        name=\"reset\"/>\n            </div>\n        </div>\n    );\n};","import React from \"react\";\n\ntype inputValueType = {\n    name: string\n    inputValue: number\n    changeValue: (value: number) => void\n    changeStatusButtons: () => void\n    isIncorrectValue: boolean\n}\n\nexport const InputComponent = (props: inputValueType) => {\n\n    const onChangeInputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.currentTarget.value) {\n            props.changeValue(+e.currentTarget.value)\n            props.changeStatusButtons();\n        }\n    }\n\n    return (\n        <>\n            <label\n                className={\n                    props.isIncorrectValue ? \"inputValue error\" : \"inputValue\"\n                }\n            >\n                <span>{props.name}</span>\n                <input\n                    type=\"number\"\n                    value={props.inputValue}\n                    onChange={onChangeInputHandler}\n                />\n            </label>\n        </>\n    );\n};","import React from \"react\";\nimport {Button} from \"../Button/Button\";\nimport {InputComponent} from \"../InputComponent/InputComponent\";\n\ntype PropsType = {\n    max: number\n    start: number\n    isSetBtnDisable: boolean\n    isIncorrectStartValue: boolean\n    isIncorrectMaxValue: boolean\n    changeMinValue: (value: number) => void\n    changeMaxValue: (value: number) => void\n    disableSet: boolean\n\n    onClickSetBtn: () => void\n    changeStatusButtons: () => void\n}\n\nexport const Settings = (props: PropsType) => {\n\n    return (\n        <div className=\"Block Settings\">\n            <div className=\"Display\">\n                <div>\n                    <InputComponent\n                        isIncorrectValue={props.isIncorrectMaxValue}\n                        name=\"max value\"\n                        inputValue={props.max}\n                        changeValue={props.changeMaxValue}\n                        changeStatusButtons={props.changeStatusButtons}\n                    />\n                    <br/>\n                    <InputComponent\n                        isIncorrectValue={props.isIncorrectStartValue}\n                        name=\"start value\"\n                        inputValue={props.start}\n                        changeValue={props.changeMinValue}\n                        changeStatusButtons={props.changeStatusButtons}\n                    />\n                </div>\n\n            </div>\n            <div className=\"BlockWrapper\">\n                <Button callBack={() => {\n                    props.onClickSetBtn()\n                }} isDisabled={props.isSetBtnDisable} name=\"set\"/>\n            </div>\n        </div>\n    );\n};","import React, {useEffect} from \"react\";\nimport './App.css';\nimport {Counter} from \"./components/Counter/Counter\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./redux/store\";\nimport {\n    changeMax,\n    changeStart,\n    changeStatusIncBtn, changeStatusResetBtn,\n    changeStatusSetBtn,\n    changeValue,\n    initialStateType\n} from \"./redux/counter-reducer\";\n\nconst App = () => {\n    const dispatch = useDispatch();\n    const counter = useSelector<AppStateType, initialStateType>(state => state.counterReducer)\n\n    const disable = true;\n\n    const isIncorrectValues = (counter.max <= counter.start || counter.max < 0 || counter.start < 0);\n    const isIncorrectStartValue = (counter.max <= counter.start || counter.start < 0);\n    const isIncorrectMaxValue = (counter.max <= counter.start || counter.max < 0);\n    const isIncBtnDisable = counter.value === counter.max ? disable : counter.incBtnStatus;\n    const isResetBtnDisable = counter.value === counter.start ? disable : counter.resetBtnStatus;\n    const isSetBtnDisable = isIncorrectValues ? disable : counter.setBtnStatus;\n    const isSettingBlockActive = counter.setBtnStatus === !disable && counter.incBtnStatus === disable && counter.resetBtnStatus === disable;\n\n\n    const getItemFromLocalStorage = (name: string, fn: (value: number) => void) => {\n        let valueAsString = localStorage.getItem(name);\n        if (valueAsString) {\n            let newValue = JSON.parse(valueAsString);\n           \n            dispatch(fn(newValue));\n        }\n    };\n\n\n    useEffect(() => {\n        getItemFromLocalStorage('startValue', changeStart);\n        getItemFromLocalStorage('maxValue', changeMax);\n        getItemFromLocalStorage('counterValue', changeValue);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n\n    useEffect(() => {\n        localStorage.setItem('maxValue', JSON.stringify(counter.max));\n        localStorage.setItem('startValue', JSON.stringify(counter.start));\n        localStorage.setItem('counterValue', JSON.stringify(counter.start));\n    }, [counter.max, counter.start, counter.value]);\n\n\n    const increaseValue = () => {\n        dispatch(changeValue(counter.value + 1))\n    };\n\n    const resetValue = () => {\n        dispatch(changeValue(counter.start))\n    };\n\n    const changeMinValue = (value: number) => {\n        dispatch(changeStart(value))\n    };\n\n    const changeMaxValue = (value: number) => {\n        dispatch(changeMax(value))\n    };\n\n    const disabledBlock = (flag: boolean) => {\n        dispatch(changeStatusSetBtn(flag))\n        dispatch(changeStatusIncBtn(!flag))\n        dispatch(changeStatusResetBtn(!flag))\n    }\n\n    const disableSettingBlock = () => {\n        disabledBlock(disable)\n    };\n\n    const disableCounterBlock = () => {\n        disabledBlock(!disable)\n    };\n\n    const changeStatusButtons = () => {\n        disableCounterBlock();\n    };\n\n    const onClickSetBtn = () => {\n        changeMinValue(counter.start);\n        changeMaxValue(counter.max);\n        resetValue();\n        disableSettingBlock();\n    };\n\n    return (\n        <div className=\"AppWrapper\">\n            <Settings\n                max={counter.max}\n                start={counter.start}\n                changeMinValue={changeMinValue}\n                changeMaxValue={changeMaxValue}\n                disableSet={counter.setBtnStatus}\n                onClickSetBtn={onClickSetBtn}\n                changeStatusButtons={changeStatusButtons}\n                isSetBtnDisable={isSetBtnDisable}\n                isIncorrectStartValue={isIncorrectStartValue}\n                isIncorrectMaxValue={isIncorrectMaxValue}\n            />\n\n            <Counter\n                value={counter.value}\n                max={counter.max}\n                start={counter.start}\n                increaseValue={increaseValue}\n                resetValue={resetValue}\n                isIncBtnDisable={isIncBtnDisable}\n                isResetBtnDisable={isResetBtnDisable}\n                isIncorrectValues={isIncorrectValues}\n                isSettingBlockActive={isSettingBlockActive}\n            />\n        </div>\n    )\n}\n\nexport default App;","import {combineReducers, createStore} from \"redux\";\nimport {counterReducer} from \"./counter-reducer\";\n\n\nconst rootReducer = combineReducers({\n    counterReducer: counterReducer\n})\n\nexport type AppStateType = ReturnType<typeof rootReducer>\n\nexport const store = createStore(rootReducer)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(<Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n)\n;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}