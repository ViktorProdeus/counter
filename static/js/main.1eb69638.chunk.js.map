{"version":3,"sources":["serviceWorker.ts","components/InnerValue/InnerValue.tsx","components/Button/Button.tsx","components/Counter/Counter.tsx","components/InputComponent/InputComponent.tsx","components/Settings/Settings.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","InnerValue","props","isSettingBlockActive","className","isIncorrectValues","value","max","Button","onClick","callBack","disabled","isDisabled","name","Counter","start","increaseValue","isIncBtnDisable","resetValue","isResetBtnDisable","InputComponent","isIncorrectValue","type","inputValue","onChange","e","currentTarget","changeValue","onChangeInputValue","Settings","isIncorrectMaxValue","changeMaxValue","isIncorrectStartValue","changeMinValue","onClickSetBtn","isSetBtnDisable","App","useState","setStart","setMax","setValue","disableSet","setDisableSet","disableInc","setDisableInc","disableReset","setDisableReset","getItemFromLocalStorage","fn","valueAsString","localStorage","getItem","JSON","parse","useEffect","setItem","stringify","disabledBlock","flag","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1eb69638.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nexport type PropsType = {\n    value: number\n    max: number\n    start: number\n    isIncorrectValues: boolean\n    isSettingBlockActive: boolean\n}\n\nexport const InnerValue = (props: PropsType) => {\n    return (\n        props.isSettingBlockActive\n            ? <div\n                className={\n                    props.isIncorrectValues\n                        ? \"textValue value error\" : \"value textValue\"\n                }\n            >\n                {\n                    props.isIncorrectValues\n                        ? \"Incorrect value\" : \"Enter values and press 'set'\"\n                }\n            </div>\n\n            : <div\n                className={props.value === props.max ? \"value error\" : \"value\"}\n            >\n                {props.value}\n            </div>\n\n    )\n};","import React from \"react\";\n\ntype PropsType = {\n    name: string\n    isDisabled: boolean\n    callBack: () => void\n}\n\nexport const Button = (props: PropsType) => {\n    return (\n        <>\n            <button\n                className=\"Button\"\n                onClick={props.callBack}\n                disabled={props.isDisabled}\n            >\n                {props.name}\n            </button>\n        </>\n    );\n};","import {InnerValue} from \"../InnerValue/InnerValue\";\nimport {Button} from \"../Button/Button\";\nimport React from \"react\";\n\ntype PropsType = {\n    value: number\n    max: number\n    start: number\n\n    increaseValue: () => void\n    resetValue: () => void\n    isIncBtnDisable: boolean\n    isResetBtnDisable: boolean\n    isIncorrectValues: boolean\n    isSettingBlockActive: boolean\n}\n\nexport const Counter = (props: PropsType) => {\n\n    return (\n        <div className=\"Block Counter\">\n            <div className=\"Display\">\n                <InnerValue\n                    value={props.value}\n                    max={props.max} start={props.start}\n                    isIncorrectValues={props.isIncorrectValues}\n                    isSettingBlockActive={props.isSettingBlockActive}\n                />\n            </div>\n            <div className=\"BlockWrapper\">\n                <Button callBack={props.increaseValue} isDisabled={props.isIncBtnDisable}\n                        name=\"inc\"/>\n                <Button callBack={props.resetValue} isDisabled={props.isResetBtnDisable}\n                        name=\"reset\"/>\n            </div>\n        </div>\n    );\n};","import React from \"react\";\n\ntype inputValueType = {\n    name: string\n    inputValue: number\n    changeValue: (value: number) => void\n    onChangeInputValue: () => void\n    isIncorrectValue: boolean\n}\n\nexport const InputComponent = (props: inputValueType) => {\n\n    const onChangeInputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.currentTarget.value) {\n            props.changeValue(+e.currentTarget.value)\n            props.onChangeInputValue && props.onChangeInputValue();\n        }\n    }\n\n    return (\n        <>\n            <label\n                className={\n                    props.isIncorrectValue ? \"inputValue error\" : \"inputValue\"\n                }\n            >\n                <span>{props.name}</span>\n                <input\n                    type=\"number\"\n                    value={props.inputValue}\n                    onChange={onChangeInputHandler}\n                />\n            </label>\n        </>\n    );\n};","import React from \"react\";\nimport {Button} from \"../Button/Button\";\nimport {InputComponent} from \"../InputComponent/InputComponent\";\n\ntype PropsType = {\n    max: number\n    start: number\n    isSetBtnDisable: boolean\n    isIncorrectStartValue: boolean\n    isIncorrectMaxValue: boolean\n    changeMinValue: (value: number) => void\n    changeMaxValue: (value: number) => void\n    disableSet: boolean\n\n    onClickSetBtn: () => void\n    onChangeInputValue: () => void\n}\n\nexport const Settings = (props: PropsType) => {\n\n    return (\n        <div className=\"Block Settings\">\n            <div className=\"Display\">\n                <div>\n                    <InputComponent\n                        isIncorrectValue={props.isIncorrectMaxValue}\n                        name=\"max value\"\n                        inputValue={props.max}\n                        changeValue={props.changeMaxValue}\n                        onChangeInputValue={props.onChangeInputValue}\n                    />\n                    <br/>\n                    <InputComponent\n                        isIncorrectValue={props.isIncorrectStartValue}\n                        name=\"start value\"\n                        inputValue={props.start}\n                        changeValue={props.changeMinValue}\n                        onChangeInputValue={props.onChangeInputValue}\n                    />\n                </div>\n\n            </div>\n            <div className=\"BlockWrapper\">\n                <Button callBack={() => {\n                    props.onClickSetBtn()\n                }} isDisabled={props.isSetBtnDisable} name=\"set\"/>\n            </div>\n        </div>\n    );\n};\n\nexport default Settings;","import React, {useEffect, useState} from \"react\";\nimport './App.css';\nimport {Counter} from \"./components/Counter/Counter\";\nimport {Settings} from \"./components/Settings/Settings\";\n\nconst App = () => {\n    const [start, setStart] = useState<number>(0);\n    const [max, setMax] = useState<number>(5);\n    let [value, setValue] = useState<number>(start);\n\n    const disable = true;\n    const [disableSet, setDisableSet] = useState<boolean>(disable);\n    const [disableInc, setDisableInc] = useState<boolean>(!disable);\n    const [disableReset, setDisableReset] = useState<boolean>(!disable);\n\n    const isIncorrectValues = (max <= start || max < 0 || start < 0);\n    const isIncorrectStartValue = (max <= start || start < 0);\n    const isIncorrectMaxValue = (max <= start || max < 0);\n    const isIncBtnDisable = value === max ? disable : disableInc;\n    const isResetBtnDisable = value === start ? disable : disableReset;\n    const isSetBtnDisable = isIncorrectValues ? disable : disableSet;\n    const isSettingBlockActive = disableSet === !disable && disableInc === disable && disableReset === disable;\n\n\n    const getItemFromLocalStorage = (name: string, fn: (value: number) => void) => {\n        let valueAsString = localStorage.getItem(name);\n        if (valueAsString) {\n            let newValue = JSON.parse(valueAsString);\n            fn(newValue);\n        }\n    };\n\n\n    useEffect(() => {\n        getItemFromLocalStorage('startValue', setStart);\n        getItemFromLocalStorage('maxValue', setMax);\n        getItemFromLocalStorage('counterValue', setValue);\n    }, []);\n\n\n    useEffect(() => {\n        localStorage.setItem('maxValue', JSON.stringify(max));\n        localStorage.setItem('startValue', JSON.stringify(start));\n        localStorage.setItem('counterValue', JSON.stringify(start));\n    }, [max, start, value]);\n\n\n    const increaseValue = () => {\n        setValue(value + 1)\n    };\n\n    const resetValue = () => {\n        setValue(start)\n    };\n\n    const changeMinValue = (value: number) => {\n        setStart(value)\n    };\n\n    const changeMaxValue = (value: number) => {\n        setMax(value)\n    };\n\n    const disabledBlock = (flag: boolean) => {\n        setDisableSet(flag);\n        setDisableInc(!flag);\n        setDisableReset(!flag);\n    }\n\n    const disableSettingBlock = () => {\n        disabledBlock(disable)\n    };\n\n    const disableCounterBlock = () => {\n        disabledBlock(!disable)\n    };\n\n    const onChangeInputValue = () => {\n        disableCounterBlock();\n    };\n\n    const onClickSetBtn = () => {\n        changeMinValue(start);\n        changeMaxValue(max);\n        resetValue();\n        disableSettingBlock();\n    };\n\n    return (\n        <div className=\"AppWrapper\">\n            <Settings\n                max={max}\n                start={start}\n                changeMinValue={changeMinValue}\n                changeMaxValue={changeMaxValue}\n                disableSet={disableSet}\n                onClickSetBtn={onClickSetBtn}\n                onChangeInputValue={onChangeInputValue}\n                isSetBtnDisable={isSetBtnDisable}\n                isIncorrectStartValue={isIncorrectStartValue}\n                isIncorrectMaxValue={isIncorrectMaxValue}\n            />\n\n            <Counter\n                value={value}\n                max={max}\n                start={start}\n                increaseValue={increaseValue}\n                resetValue={resetValue}\n                isIncBtnDisable={isIncBtnDisable}\n                isResetBtnDisable={isResetBtnDisable}\n                isIncorrectValues={isIncorrectValues}\n                isSettingBlockActive={isSettingBlockActive}\n            />\n        </div>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}